generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  dob             DateTime?
  profileImage    String?
  status          Status           @default(ACTIVE)
  email           String           @unique
  password        String
  role            Role             @default(SHOP_STAFF)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  contactNumber   String?
  refreshToken    String?
  refreshTokenExp DateTime?
  defaultShopId   String?          @map("default_shop_id")
  wallets         CustomerWallet[]
  orders          Order[]
  shopAccess      UserShop[]
  employeeProfile Employee[]
  defaultShop     Shop?            @relation("DefaultShop", fields: [defaultShopId], references: [id])

  @@index([email])
  @@index([defaultShopId])
  @@index([role])
  @@index([status])
  @@map("users")
}

model Shop {
  id              String           @id @default(uuid())
  businessName    String           @map("business_name")
  shopCategory    String?          @map("shop_category")
  address         String
  shopLogo        String?          @map("shop_logo")
  shopBanner      String?          @map("shop_banner")
  contactPhone    String?          @map("contact_phone")
  status          Status           @default(ACTIVE)
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  Category        Category[]
  customerWallets CustomerWallet[]
  orders          Order[]
  products        Product[]
  shopBalance     ShopBalance?
  suppliers       Supplier[]
  users           UserShop[]
  employees       Employee[]
  defaultForUsers User[]           @relation("DefaultShop")
  transactions    Transaction[]
  recurringPayments RecurringPayment[]
  upcomingPayments UpcomingPayment[]

  @@index([status])
  @@map("shops")
}

model UserShop {
  userId    String   @map("user_id")
  shopId    String   @map("shop_id")
  role      Role     @default(SHOP_STAFF)
  createdAt DateTime @default(now()) @map("created_at")
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, shopId])
  @@index([userId])
  @@index([shopId])
  @@map("user_shops")
}

model Employee {
  id            String         @id @default(uuid())
  userId        String         @map("user_id")
  shopId        String         @map("shop_id")
  designation   String
  department    String?
  salary        String         // Using string to handle decimal values precisely
  hireDate      DateTime       @map("hire_date")
  status        EmployeeStatus @default(ACTIVE)
  emergencyContact String?     @map("emergency_contact")
  address       String?
  notes         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shop          Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@unique([userId, shopId])
  @@index([userId])
  @@index([shopId])
  @@map("employees")
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  contactNumber String    @map("contact_number")
  shopId        String    @map("shop_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  email         String?
  haveWhatsApp  Boolean   @default(false) @map("have_whatsapp")
  products      Product[]
  shop          Shop      @relation(fields: [shopId], references: [id])

  @@index([shopId])
  @@map("suppliers")
}

model Product {
  id               String            @id @default(uuid())
  name             String
  description      String?
  shopId           String            @map("shop_id")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  displayName      String?           @map("display_name")
  imageUrls        String[]          @map("image_urls")
  keepingUnits     Int               @map("keeping_units")
  warrantyMonths   Int?              @map("warranty_months")
  loyaltyPoints    Int?              @map("loyalty_points")
  supplierId       String?           @map("supplier_id")
  categoryId       String?           @map("category_id")
  subCategoryId    String?           @map("sub_category_id")
  subSubCategoryId String?           @map("sub_sub_category_id")
  status           ProductStatus     @default(ACTIVE)
  items            Item[]
  orderItems       OrderItem[]
  productDiscounts ProductDiscount[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  shop             Shop              @relation(fields: [shopId], references: [id])
  subCategory      SubCategory?      @relation(fields: [subCategoryId], references: [id])
  subSubCategory   SubSubCategory?   @relation(fields: [subSubCategoryId], references: [id])
  supplier         Supplier?         @relation(fields: [supplierId], references: [id])

  @@index([shopId])
  @@index([supplierId])
  @@index([status])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([subSubCategoryId])
  @@map("products")
}

model Discount {
  id               String            @id @default(uuid())
  title            String
  description      String?
  status           ProductStatus     @default(ACTIVE)
  startDate        DateTime          @map("start_date")
  endDate          DateTime          @map("end_date")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  productDiscounts ProductDiscount[]

  @@map("discounts")
}

model ProductDiscount {
  id         String   @id @default(uuid())
  productId  String   @map("product_id")
  discountId String   @map("discount_id")
  percentage Float // e.g. 30.0 for 30% off
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  product    Product  @relation(fields: [productId], references: [id])
  discount   Discount @relation(fields: [discountId], references: [id])

  @@unique([productId, discountId])
  @@map("product_discounts")
}

model Item {
  id             String      @id @default(uuid())
  barcode        String      @unique
  broughtPrice   String      @map("brought_price")
  sellPrice      String      @map("sell_price")
  warrantyPeriod DateTime?   @map("warranty_period")
  productId      String      @map("product_id")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  product        Product     @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("items")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?       @map("image_url")
  status        ProductStatus @default(ACTIVE)
  shopId        String        @map("shop_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  shop          Shop          @relation(fields: [shopId], references: [id])
  products      Product[]
  subCategories SubCategory[]

  @@index([shopId])
  @@index([status])
  @@map("categories")
}

model SubCategory {
  id               String           @id @default(uuid())
  name             String
  description      String?
  imageUrl         String?          @map("image_url")
  status           ProductStatus    @default(ACTIVE)
  categoryId       String           @map("category_id")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  products         Product[]
  category         Category         @relation(fields: [categoryId], references: [id])
  subSubCategories SubSubCategory[]

  @@index([categoryId])
  @@index([status])
  @@map("sub_categories")
}

model SubSubCategory {
  id            String        @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?       @map("image_url")
  status        ProductStatus @default(ACTIVE)
  subCategoryId String        @map("sub_category_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  products      Product[]
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])

  @@index([subCategoryId])
  @@index([status])
  @@map("sub_sub_categories")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([expiresAt])
  @@map("otps")
}

model Order {
  id           String       @id @default(uuid())
  orderNumber  String       @unique @map("order_number")
  shopId       String       @map("shop_id")
  customerId   String?      @map("customer_id")
  status       OrderStatus  @default(PENDING)
  subtotal     String
  discount     String       @default("0")
  discountType DiscountType @default(FIXED) @map("discount_type")
  total        String
  paid         String
  paymentDue   String       @default("0") @map("payment_due")
  note         String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  orderItems   OrderItem[]
  customer     User?        @relation(fields: [customerId], references: [id])
  shop         Shop         @relation(fields: [shopId], references: [id])
  payments     Payment[]
  walletTransactions WalletTransaction[]

  @@index([shopId])
  @@index([customerId])
  @@index([status])
  @@index([createdAt])
  @@map("orders")
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String   @map("order_id")
  productId     String   @map("product_id")
  itemId        String   @map("item_id")
  quantity      Int      @default(1)
  originalPrice String   @map("original_price")
  sellingPrice  String   @map("selling_price")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([itemId])
  @@map("order_items")
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @map("order_id")
  amount    String
  method    PaymentMethod
  reference String?
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([method])
  @@map("payments")
}

model CustomerWallet {
  customerId    String   @map("customer_id")
  shopId        String   @map("shop_id")
  balance       String   @default("0")
  loyaltyPoints String   @default("0") @map("loyalty_points")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  customer      User     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  transactions  WalletTransaction[]

  @@id([customerId, shopId])
  @@index([customerId])
  @@index([shopId])
  @@map("customer_wallets")
}

model WalletTransaction {
  id          String   @id @default(uuid())
  customerId  String   @map("customer_id")
  shopId      String   @map("shop_id")
  orderId     String?  @map("order_id")
  amount      String   // Positive for additions, negative for deductions
  type        TransactionType
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  wallet      CustomerWallet @relation(fields: [customerId, shopId], references: [customerId, shopId], onDelete: Cascade)
  order       Order?    @relation(fields: [orderId], references: [id])

  @@index([customerId])
  @@index([shopId])
  @@index([orderId])
  @@map("wallet_transactions")
}

model ShopBalance {
  id          String   @id @default(uuid())
  shopId      String   @unique @map("shop_id")
  cashBalance String   @default("0") @map("cash_balance")
  cardBalance String   @default("0") @map("card_balance")
  bankBalance String   @default("0") @map("bank_balance")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@map("shop_balances")
}

// Cash Flow Management Models
model Transaction {
  id          String           @id @default(uuid())
  description String
  amount      String           // Use string to handle decimal values precisely
  date        DateTime
  shopId      String           @map("shop_id")
  type        TransactionType  // Reusing the existing TransactionType
  category    TransactionCategory
  isRecurring Boolean          @default(false) @map("is_recurring")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  shop        Shop             @relation(fields: [shopId], references: [id], onDelete: Cascade)
  recurringPayment RecurringPayment?

  @@index([shopId])
  @@index([type])
  @@index([category])
  @@index([date])
  @@map("transactions")
}

enum TransactionCategory {
  SHOP_RENT
  UTILITIES
  STOCK_PURCHASE
  STAFF_WAGES
  MARKETING
  SALES
  SERVICE_FEES
  DELIVERY_CHARGES
  VAT_PAYMENT
  INSURANCE
  EQUIPMENT
  INTERNET
  POS_SYSTEM_FEE
  OTHER
}

model RecurringPayment {
  id              String    @id @default(uuid())
  description     String
  amount          String    // Use string to handle decimal values precisely
  frequency       PaymentFrequency
  nextDate        DateTime  @map("next_date")
  transactionId   String    @unique @map("transaction_id")
  shopId          String    @map("shop_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  shop            Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([nextDate])
  @@map("recurring_payments")
}

model UpcomingPayment {
  id              String    @id @default(uuid())
  description     String
  amount          String    // Use string to handle decimal values precisely
  dueDate         DateTime  @map("due_date")
  paymentType     PaymentType @map("payment_type")
  isPriority      Boolean   @default(false) @map("is_priority")
  shopId          String    @map("shop_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  shop            Shop      @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@index([shopId])
  @@index([dueDate])
  @@index([isPriority])
  @@map("upcoming_payments")
}

enum PaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum PaymentType {
  ONE_TIME
  RECURRING
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  HIDE
}

enum Role {
  ADMIN
  SHOP_OWNER
  SHOP_STAFF
  CUSTOMER
  SUPER_ADMIN
}

enum OrderStatus {
  DRAFT
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

enum PaymentMethod {
  CASH
  CARD
  BANK
  WALLET
}

enum TransactionType {
  ORDER_PAYMENT
  DUE_PAYMENT
  EXTRA_PAYMENT
  LOYALTY_POINTS
  REFUND
}

enum EmployeeStatus {
  ACTIVE
  ON_LEAVE
  SUSPENDED
  TERMINATED
}

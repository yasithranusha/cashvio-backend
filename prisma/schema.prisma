generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  name            String
  dob             DateTime?
  profileImage    String?
  status          Status     @default(ACTIVE)
  email           String     @unique
  password        String
  role            Role       @default(SHOP_STAFF)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  contactNumber   String?
  refreshToken    String?
  refreshTokenExp DateTime?
  defaultShopId   String?    @map("default_shop_id")
  shopAccess      UserShop[]
  defaultShop     Shop?      @relation("DefaultShop", fields: [defaultShopId], references: [id])

  @@index([email])
  @@index([defaultShopId])
  @@index([role])
  @@index([status])
  @@map("users")
}

model Shop {
  id              String     @id @default(uuid())
  businessName    String     @map("business_name")
  address         String
  shopLogo        String?    @map("shop_logo")
  shopBanner      String?    @map("shop_banner")
  contactPhone    String?    @map("contact_phone")
  status          Status     @default(ACTIVE)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  Category        Category[]
  products        Product[]
  suppliers       Supplier[]
  users           UserShop[]
  defaultForUsers User[]     @relation("DefaultShop")

  @@index([status])
  @@map("shops")
}

model UserShop {
  userId    String   @map("user_id")
  shopId    String   @map("shop_id")
  role      Role     @default(SHOP_STAFF)
  createdAt DateTime @default(now()) @map("created_at")
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, shopId])
  @@index([userId])
  @@index([shopId])
  @@map("user_shops")
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  contactNumber String    @map("contact_number")
  shopId        String    @map("shop_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  products      Product[]
  shop          Shop      @relation(fields: [shopId], references: [id])

  @@index([shopId])
  @@map("suppliers")
}

model Product {
  id               String          @id @default(uuid())
  name             String
  description      String?
  shopId           String          @map("shop_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  displayName      String?         @map("display_name")
  imageUrls        String[]        @map("image_urls")
  keepingUnits     Int             @map("keeping_units")
  supplierId       String?         @map("supplier_id")
  categoryId       String?         @map("category_id")
  subCategoryId    String?         @map("sub_category_id")
  subSubCategoryId String?         @map("sub_sub_category_id")
  status           ProductStatus   @default(ACTIVE)
  items            Item[]
  category         Category?       @relation(fields: [categoryId], references: [id])
  shop             Shop            @relation(fields: [shopId], references: [id])
  subCategory      SubCategory?    @relation(fields: [subCategoryId], references: [id])
  subSubCategory   SubSubCategory? @relation(fields: [subSubCategoryId], references: [id])
  supplier         Supplier?       @relation(fields: [supplierId], references: [id])

  @@index([shopId])
  @@index([supplierId])
  @@index([status])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([subSubCategoryId])
  @@map("products")
}

model Item {
  id             String    @id @default(uuid())
  barcode        String    @unique
  broughtPrice   Float     @map("brought_price")
  sellPrice      Float     @map("sell_price")
  warrantyPeriod DateTime? @map("warranty_period")
  productId      String    @map("product_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  product        Product   @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("items")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?       @map("image_url")
  status        ProductStatus @default(ACTIVE)
  shopId        String        @map("shop_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  shop          Shop          @relation(fields: [shopId], references: [id])
  products      Product[]
  subCategories SubCategory[]

  @@index([shopId])
  @@index([status])
  @@map("categories")
}

model SubCategory {
  id               String           @id @default(uuid())
  name             String
  description      String?
  imageUrl         String?          @map("image_url")
  status           ProductStatus    @default(ACTIVE)
  categoryId       String           @map("category_id")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  products         Product[]
  category         Category         @relation(fields: [categoryId], references: [id])
  subSubCategories SubSubCategory[]

  @@index([categoryId])
  @@index([status])
  @@map("sub_categories")
}

model SubSubCategory {
  id            String        @id @default(uuid())
  name          String
  description   String?
  imageUrl      String?       @map("image_url")
  status        ProductStatus @default(ACTIVE)
  subCategoryId String        @map("sub_category_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  products      Product[]
  subCategory   SubCategory   @relation(fields: [subCategoryId], references: [id])

  @@index([subCategoryId])
  @@index([status])
  @@map("sub_sub_categories")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([expiresAt])
  @@map("otps")
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum ProductStatus {
  ACTIVE
  HIDE
}

enum Role {
  ADMIN
  SHOP_OWNER
  SHOP_STAFF
  CUSTOMER
  SUPER_ADMIN
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE // Operating normally
  INACTIVE // Temporarily inactive
  SUSPENDED // Suspended by admin
}

enum ProductStatus {
  ACTIVE
  HIDE
}

enum Role {
  ADMIN
  SHOP_OWNER
  SHOP_STAFF
  CUSTOMER
}

model User {
  id            String    @id @default(uuid())
  name          String
  dob           DateTime?
  profileImage  String?
  contactNumber String?
  status        Status    @default(ACTIVE)
  email         String    @unique
  password      String
  role          Role      @default(SHOP_STAFF)

  // many-to-many relation
  shopAccess UserShop[]

  // default shop relation
  defaultShop   Shop?   @relation("DefaultShop", fields: [defaultShopId], references: [id])
  defaultShopId String? @map("default_shop_id")

  refreshToken    String?
  refreshTokenExp DateTime?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([defaultShopId])
  @@index([role])
  @@index([status])
  @@map("users")
}

model Shop {
  id           String  @id @default(uuid())
  businessName String  @map("business_name")
  address      String
  shopLogo     String? @map("shop_logo")
  shopBanner   String? @map("shop_banner")
  contactPhone String? @map("contact_phone")
  status       Status  @default(ACTIVE)

  // Replace direct users relation with many-to-many
  users UserShop[]

  // Add relation for users who have this as their default shop
  defaultForUsers User[] @relation("DefaultShop")

  products  Product[]
  suppliers Supplier[]

  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  Category  Category[]

  @@index([status])
  @@map("shops")
}

// New join table for many-to-many relationship
model UserShop {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId String @map("shop_id")
  role   Role   @default(SHOP_STAFF) // Store the user's role for this specific shop

  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, shopId])
  @@index([userId])
  @@index([shopId])
  @@map("user_shops")
}

model Supplier {
  id            String    @id @default(uuid())
  name          String
  contactNumber String    @map("contact_number")
  shop          Shop      @relation(fields: [shopId], references: [id])
  shopId        String    @map("shop_id")
  products      Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([shopId])
  @@map("suppliers")
}

model Product {
  id           String        @id @default(uuid())
  name         String
  description  String?
  displayName  String?       @map("display_name")
  keepingUnits Int           @map("keeping_units")
  imageUrls    String[]      @map("image_urls")
  status       ProductStatus @default(ACTIVE)

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @map("shop_id")

  supplier   Supplier? @relation(fields: [supplierId], references: [id])
  supplierId String?   @map("supplier_id")

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @map("category_id")

  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId String?      @map("sub_category_id")

  subSubCategory   SubSubCategory? @relation(fields: [subSubCategoryId], references: [id])
  subSubCategoryId String?         @map("sub_sub_category_id")

  items Item[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([shopId])
  @@index([supplierId])
  @@index([status])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([subSubCategoryId])
  @@map("products")
}

model Item {
  id             String    @id @default(uuid())
  barcode        String    @unique
  broughtPrice   Float     @map("brought_price")
  sellPrice      Float     @map("sell_price")
  warrantyPeriod DateTime? @map("warranty_period")

  product   Product @relation(fields: [productId], references: [id])
  productId String  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@map("items")
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String?
  imageUrl    String?       @map("image_url")
  status      ProductStatus @default(ACTIVE)

  shop   Shop   @relation(fields: [shopId], references: [id])
  shopId String @map("shop_id")

  products      Product[]
  subCategories SubCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([shopId])
  @@index([status])
  @@map("categories")
}

model SubCategory {
  id          String        @id @default(uuid())
  name        String
  description String?
  imageUrl    String?       @map("image_url")
  status      ProductStatus @default(ACTIVE)

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @map("category_id")

  products         Product[]
  subSubCategories SubSubCategory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([categoryId])
  @@index([status])
  @@map("sub_categories")
}

model SubSubCategory {
  id          String        @id @default(uuid())
  name        String
  description String?
  imageUrl    String?       @map("image_url")
  status      ProductStatus @default(ACTIVE)

  subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
  subCategoryId String      @map("sub_category_id")

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([subCategoryId])
  @@index([status])
  @@map("sub_sub_categories")
}

model Otp {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([expiresAt])
  @@map("otps")
}

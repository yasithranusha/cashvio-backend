name: Build and Deploy to Production

on:
  push:
    branches:
      - production
  workflow_dispatch:

jobs:
  build-auth:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push auth service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/auth/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/cashvio-auth:latest,${{ vars.DOCKERHUB_USERNAME }}/cashvio-auth:${{ github.sha }}
          target: production

  build-mailer-uploader:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push mailer-uploader service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/mailer-uploader/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/cashvio-mailer-uploader:latest,${{ vars.DOCKERHUB_USERNAME }}/cashvio-mailer-uploader:${{ github.sha }}
          target: production

  build-stock:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push stock service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/stock/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/cashvio-stock:latest,${{ vars.DOCKERHUB_USERNAME }}/cashvio-stock:${{ github.sha }}
          target: production

  build-order:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push order service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/order/Dockerfile
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/cashvio-order:latest,${{ vars.DOCKERHUB_USERNAME }}/cashvio-order:${{ github.sha }}
          target: production

  deploy:
    needs: [build-auth, build-mailer-uploader, build-stock, build-order]
    runs-on: ubuntu-latest
    environment: production

    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Create Docker Compose File
        working-directory: ${{ github.workspace }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          GITHUB_SHA: ${{ github.sha }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_JWT_SECRET: ${{ secrets.REFRESH_JWT_SECRET }}
          FORGET_PASSWORD_SECRET: ${{ secrets.FORGET_PASSWORD_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          CUSTOMER_CLIENT_URL: ${{ secrets.CUSTOMER_CLIENT_URL }}
          ADMIN_CLIENT_URL: ${{ secrets.ADMIN_CLIENT_URL }}
          SHOP_CLIENT_URL: ${{ secrets.SHOP_CLIENT_URL }}
          MAILER_EMAIL: ${{ secrets.MAILER_EMAIL }}
          OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
          OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
          OAUTH_REFRESH_TOKEN: ${{ secrets.OAUTH_REFRESH_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_KMS_KEY_ID: ${{ secrets.AWS_KMS_KEY_ID }}
          AWS_KMS_KEY_ALIAS: ${{ secrets.AWS_KMS_KEY_ALIAS }}
        run: |
          mkdir -p docker
          envsubst < docker-compose-template.yml > docker/docker-compose.yml

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            ServerAliveInterval 60
            ServerAliveCountMax 10
          " > ~/.ssh/config
          chmod 600 ~/.ssh/config

          # Transfer file
          scp -o StrictHostKeyChecking=no docker/docker-compose.yml $EC2_USER@$EC2_HOST:~/cashvio-backend/

          # Deploy on EC2
          ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            set -e
            mkdir -p ~/cashvio-backend
            cd ~/cashvio-backend

            echo "Pulling images..."
            sudo docker-compose pull

            echo "Creating containers..."
            sudo docker-compose create

            echo "Starting services..."
            sudo docker-compose start

            echo "Running containers:"
            sudo docker ps
          EOF
